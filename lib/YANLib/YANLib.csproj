<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFramework>net8.0</TargetFramework>
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>
		<ApplicationIcon>favicon.ico</ApplicationIcon>
		<GeneratePackageOnBuild>True</GeneratePackageOnBuild>
		<Title>YANLib</Title>
		<Authors>Yami An</Authors>
		<Company>YAN</Company>
		<Description>
			YANLib (YAMI AN NEPHILIM LIBRARY) is a comprehensive .NET utility library providing powerful extension methods that enhance developer productivity. Built on .NET 6.0 LTS, it offers high-performance utilities for JSON serialization, text manipulation, object validation, task coordination, mathematical operations, DateTime handling, and more.

			Key features:
			• YANJson: High-performance JSON serialization with robust error handling
			• YANText: String manipulation, validation, and transformation with null safety
			• YANObject: Object validation, property analysis, and deep copying
			• YANTask: Enhanced task coordination with conditional waiting and error handling
			• YANUnmanaged: Type parsing and conversion with built-in error handling
			• YANRandom: Random value generation for various types and collections
			• YANMath: Mathematical operations with null handling and type conversion
			• YANDateTime: Time zone conversion and date calculations
			• YANProcess: Process management utilities
			• YANExpression: Dynamic property access and expression tree utilities

			All components feature fluent APIs, robust null handling, collection support, and performance optimizations. YANLib simplifies common programming tasks while maintaining high performance, making it an essential toolkit for .NET developers.
		</Description>
		<Copyright>Copyright ©  2023</Copyright>
		<PackageIcon>icon.png</PackageIcon>
		<PackageProjectUrl>https://github.com/Tynab</PackageProjectUrl>
		<RepositoryUrl>https://github.com/Tynab/YANLib</RepositoryUrl>
		<PackageTags>C#, .NET, Library</PackageTags>
		<PackAsTool>False</PackAsTool>
		<PackageReadmeFile>README.md</PackageReadmeFile>
		<RepositoryType>git</RepositoryType>
		<PackageReleaseNotes>### YANLib 8.3.0 - Snowflake ID Implementation &amp; Customizable Distributed Identifiers

## Distributed ID Generation

- **Snowflake Algorithm Integration**

    - Added robust implementation of the Snowflake ID algorithm for distributed systems
    - Implemented 64-bit unique ID generation with timestamp, worker ID, datacenter ID, and sequence components
    - Full support for time-ordered, sortable identifiers with millisecond precision
    - Thread-safe implementation for concurrent ID generation in multi-threaded environments

- **Predefined Bit Allocation Strategies**

    - Added BitAllocationStrategy enum for simplified bit allocation configuration
    - Included four predefined strategies optimized for different use cases:

        - Default (5-5-13): Balanced approach for most applications
        - MoreDistributed (10-10-3): Optimized for systems with many workers and datacenters
        - HighVolume (2-2-19): Optimized for generating many IDs per millisecond on few nodes
        - Balanced (8-8-7): Middle ground between distribution and sequence capacity

    - Simplified constructor overloads for intuitive API usage
    - Automatic validation of worker and datacenter IDs based on selected strategy

- **Customizable Bit Allocation**

    - Added support for customizing bit allocation between worker ID, datacenter ID, and sequence components
    - Flexible configuration to optimize for different distributed system requirements
    - Automatic validation to ensure the total bit allocation remains within the 64-bit constraint
    - Runtime calculation of maximum values based on configured bit allocations

- **String Representation Support**

    - Added base-26 alphabetic (A-Z) string representation for more compact IDs
    - Implemented base-36 alphanumeric (0-9, A-Z) encoding for maximum compactness
    - Bidirectional conversion between numeric IDs and string representations
    - Support for custom epoch timestamps for application-specific time ranges

## Performance

- Optimized bit manipulation operations for efficient ID composition
- High-throughput ID generation with minimal overhead
- Efficient string conversion algorithms for alphabetic and alphanumeric formats
- Thread synchronization with minimal contention for concurrent scenarios
- Automatic sequence handling with configurable capacity per millisecond

## Improvements

- Component extraction methods to retrieve timestamp, worker ID, and datacenter ID from existing IDs
- Strategy-aware component extraction for simplified ID parsing
- Clock drift protection to prevent duplicate IDs when system time moves backwards
- Comprehensive XML documentation for all Snowflake ID-related methods
- Configurable worker and datacenter IDs for distributed deployment scenarios
- Seamless integration with existing YANLib components

See full documentation at: [https://github.com/Tynab/YANLib/wiki](https://github.com/Tynab/YANLib/wiki)</PackageReleaseNotes>
		<PackageLicenseExpression>MIT</PackageLicenseExpression>
		<PackageRequireLicenseAcceptance>False</PackageRequireLicenseAcceptance>
		<PackageId>Tynab.YANLib</PackageId>
		<Version>8.3.0</Version>
		<LangVersion>preview</LangVersion>
		<ProduceReferenceAssembly>True</ProduceReferenceAssembly>
		<IsPackable>true</IsPackable>
		<IncludeBuildOutput>true</IncludeBuildOutput>
	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
		<Optimize>False</Optimize>
		<DebugType>portable</DebugType>
	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
		<Optimize>True</Optimize>
		<DebugType>portable</DebugType>
	</PropertyGroup>

	<ItemGroup>
	  <Content Include="favicon.ico" />
	</ItemGroup>

	<ItemGroup>
		<None Include="..\..\README.md">
			<Pack>True</Pack>
			<PackagePath>\</PackagePath>
		</None>
		<None Include="..\..\res\icon.png">
		  <Pack>True</Pack>
		  <PackagePath>\</PackagePath>
		</None>
	</ItemGroup>

	<ItemGroup>
		<ProjectReference Include="..\YANLib.Implementation\YANLib.Implementation.csproj">
			<PrivateAssets>all</PrivateAssets>
		</ProjectReference>
	</ItemGroup>

	<ItemGroup>
		<None Include="..\YANLib.Implementation\bin\$(Configuration)\$(TargetFramework)\YANLib.Implementation.dll" Pack="true" PackagePath="lib\$(TargetFramework)" Visible="false" />
	</ItemGroup>

</Project>
