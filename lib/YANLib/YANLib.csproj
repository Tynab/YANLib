<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFramework>net8.0</TargetFramework>
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>
		<ApplicationIcon>favicon.ico</ApplicationIcon>
		<GeneratePackageOnBuild>True</GeneratePackageOnBuild>
		<Title>YANLib</Title>
		<Authors>Yami An</Authors>
		<Company>YAN</Company>
		<Description>
			YANLib (YAMI AN NEPHILIM LIBRARY) is a comprehensive .NET utility library providing powerful extension methods that enhance developer productivity. Built on .NET 6.0 LTS, it offers high-performance utilities for JSON serialization, text manipulation, object validation, task coordination, mathematical operations, DateTime handling, and more.

			Key features:
			• YANJson: High-performance JSON serialization with robust error handling
			• YANText: String manipulation, validation, and transformation with null safety
			• YANObject: Object validation, property analysis, and deep copying
			• YANTask: Enhanced task coordination with conditional waiting and error handling
			• YANUnmanaged: Type parsing and conversion with built-in error handling
			• YANRandom: Random value generation for various types and collections
			• YANMath: Mathematical operations with null handling and type conversion
			• YANDateTime: Time zone conversion and date calculations
			• YANProcess: Process management utilities
			• YANExpression: Dynamic property access and expression tree utilities

			All components feature fluent APIs, robust null handling, collection support, and performance optimizations. YANLib simplifies common programming tasks while maintaining high performance, making it an essential toolkit for .NET developers.
		</Description>
		<Copyright>Copyright ©  2023</Copyright>
		<PackageIcon>icon.png</PackageIcon>
		<PackageProjectUrl>https://github.com/Tynab</PackageProjectUrl>
		<RepositoryUrl>https://github.com/Tynab/YANLib</RepositoryUrl>
		<PackageTags>C#, .NET, Library</PackageTags>
		<PackAsTool>False</PackAsTool>
		<PackageReadmeFile>README.md</PackageReadmeFile>
		<RepositoryType>git</RepositoryType>
		<PackageReleaseNotes>### YANLib 8.3.1 - Snowflake ID Refinements &amp; Property Encapsulation Improvements

## Snowflake ID Generator Enhancements

- **Improved Property Encapsulation**

  - Refactored `IdGenerator` class to use auto-implemented properties for better encapsulation
  - Changed `Sequence` property access modifier from `internal set` to `private set` for improved security
  - Removed redundant private backing fields in favor of direct property initialization

- **Code Structure Optimization**

  - Streamlined internal implementation of bit allocation properties
  - Enhanced memory efficiency by eliminating unnecessary field duplication
  - Improved code readability and maintainability through consistent property patterns

- **Constructor Refinements**

  - Optimized constructor implementation for better performance
  - Enhanced initialization flow for predefined bit allocation strategies
  - Maintained full backward compatibility with existing code

## Architecture Improvements

- Strengthened encapsulation of internal state management
- Reduced memory footprint through elimination of redundant fields
- Improved overall code quality and maintainability
- Enhanced consistency across the Snowflake ID implementation

## Bug Fixes

- Fixed potential thread safety issues with sequence property access
- Addressed edge cases in property initialization patterns
- Ensured consistent behavior across all constructor overloads

This maintenance release focuses on internal improvements to the Snowflake ID implementation, enhancing code quality while maintaining full compatibility with existing applications.

See full documentation at: [https://github.com/Tynab/YANLib/wiki](https://github.com/Tynab/YANLib/wiki)</PackageReleaseNotes>
		<PackageLicenseExpression>MIT</PackageLicenseExpression>
		<PackageRequireLicenseAcceptance>False</PackageRequireLicenseAcceptance>
		<PackageId>Tynab.YANLib</PackageId>
		<Version>8.3.1</Version>
		<LangVersion>preview</LangVersion>
		<ProduceReferenceAssembly>True</ProduceReferenceAssembly>
		<IsPackable>true</IsPackable>
		<IncludeBuildOutput>true</IncludeBuildOutput>
	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
		<Optimize>False</Optimize>
		<DebugType>portable</DebugType>
	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
		<Optimize>True</Optimize>
		<DebugType>portable</DebugType>
	</PropertyGroup>

	<ItemGroup>
	  <Content Include="favicon.ico" />
	</ItemGroup>

	<ItemGroup>
		<None Include="..\..\README.md">
			<Pack>True</Pack>
			<PackagePath>\</PackagePath>
		</None>
		<None Include="..\..\res\icon.png">
		  <Pack>True</Pack>
		  <PackagePath>\</PackagePath>
		</None>
	</ItemGroup>

	<ItemGroup>
		<ProjectReference Include="..\YANLib.Implementation\YANLib.Implementation.csproj">
			<PrivateAssets>all</PrivateAssets>
		</ProjectReference>
	</ItemGroup>

	<ItemGroup>
		<None Include="..\YANLib.Implementation\bin\$(Configuration)\$(TargetFramework)\YANLib.Implementation.dll" Pack="true" PackagePath="lib\$(TargetFramework)" Visible="false" />
	</ItemGroup>

</Project>
