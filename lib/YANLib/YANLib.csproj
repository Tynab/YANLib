<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFramework>net8.0</TargetFramework>
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>
		<ApplicationIcon>ic.ico</ApplicationIcon>
		<GeneratePackageOnBuild>True</GeneratePackageOnBuild>
		<Title>YANLib</Title>
		<Authors>Yami An</Authors>
		<Company>YAN</Company>
		<Description>
			YANLib (YAMI AN NEPHILIM LIBRARY) is a comprehensive .NET utility library providing powerful extension methods that enhance developer productivity. Built on .NET 6.0 LTS, it offers high-performance utilities for JSON serialization, text manipulation, object validation, task coordination, mathematical operations, DateTime handling, and more.

			Key features:
			• YANJson: High-performance JSON serialization with robust error handling
			• YANText: String manipulation, validation, and transformation with null safety
			• YANObject: Object validation, property analysis, and deep copying
			• YANTask: Enhanced task coordination with conditional waiting and error handling
			• YANUnmanaged: Type parsing and conversion with built-in error handling
			• YANRandom: Random value generation for various types and collections
			• YANMath: Mathematical operations with null handling and type conversion
			• YANDateTime: Time zone conversion and date calculations
			• YANProcess: Process management utilities
			• YANExpression: Dynamic property access and expression tree utilities

			All components feature fluent APIs, robust null handling, collection support, and performance optimizations. YANLib simplifies common programming tasks while maintaining high performance, making it an essential toolkit for .NET developers.
		</Description>
		<Copyright>Copyright ©  2023</Copyright>
		<PackageIcon>icon.png</PackageIcon>
		<PackageProjectUrl>https://github.com/Tynab</PackageProjectUrl>
		<RepositoryUrl>https://github.com/Tynab/YANLib</RepositoryUrl>
		<PackageTags>C#, .NET, Library</PackageTags>
		<PackAsTool>False</PackAsTool>
		<PackageReadmeFile>README.md</PackageReadmeFile>
		<RepositoryType>git</RepositoryType>
		<PackageReleaseNotes>
			## YANLib 8.1.0 - Enhanced Task Collection Operations

			### New Features

			- Added new asynchronous collection operations to YANTask component
			- Introduced `WaitAnyWithConditions&lt;T&gt;` for efficient conditional task filtering with early termination
			- Added `WhenAnyWithConditions&lt;T&gt;` for comprehensive conditional task processing
			- Support for limiting result collection with the `taken` parameter
			- Full cancellation token integration for all new methods
			- Enhanced asynchronous enumeration capabilities

			### Performance

			- Optimized task collection processing with minimal allocations
			- Improved exception handling with zero overhead for failed tasks
			- Efficient early termination when conditions are met
			- Smart task completion detection to avoid unnecessary waiting
			- Reduced memory pressure through streaming result pattern

			### Improvements

			- Comprehensive XML documentation for all new methods
			- Extended test coverage for edge cases and concurrency scenarios
			- Consistent behavior with existing YANTask methods
			- Graceful handling of null collections and empty task sets

			See full documentation at: https://github.com/Tynab/YANLib/wiki
		</PackageReleaseNotes>
		<PackageLicenseExpression>MIT</PackageLicenseExpression>
		<PackageRequireLicenseAcceptance>False</PackageRequireLicenseAcceptance>
		<PackageId>Tynab.YANLib</PackageId>
		<Version>8.1.0</Version>
		<LangVersion>preview</LangVersion>
		<ProduceReferenceAssembly>True</ProduceReferenceAssembly>
		<IsPackable>true</IsPackable>
		<IncludeBuildOutput>true</IncludeBuildOutput>
	</PropertyGroup>

	<ItemGroup>
		<Content Include="ic.ico" />
	</ItemGroup>

	<ItemGroup>
		<None Include="..\..\README.md">
			<Pack>True</Pack>
			<PackagePath>\</PackagePath>
		</None>
		<None Include="..\..\res\icon.png">
			<Pack>True</Pack>
			<PackagePath>\</PackagePath>
		</None>
	</ItemGroup>

	<ItemGroup>
		<ProjectReference Include="..\YANLib.Implementation\YANLib.Implementation.csproj">
			<PrivateAssets>all</PrivateAssets>
		</ProjectReference>
	</ItemGroup>

	<ItemGroup>
		<None Include="..\YANLib.Implementation\bin\$(Configuration)\$(TargetFramework)\YANLib.Implementation.dll" Pack="true" PackagePath="lib\$(TargetFramework)" Visible="false" />
	</ItemGroup>

</Project>
