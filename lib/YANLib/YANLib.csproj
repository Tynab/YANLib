<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFramework>net8.0</TargetFramework>
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>
		<ApplicationIcon>ic.ico</ApplicationIcon>
		<GeneratePackageOnBuild>True</GeneratePackageOnBuild>
		<Title>YANLib</Title>
		<Authors>Yami An</Authors>
		<Company>YAN</Company>
		<Description>
			YANLib (YAMI AN NEPHILIM LIBRARY) is a comprehensive .NET utility library providing powerful extension methods that enhance developer productivity. Built on .NET 6.0 LTS, it offers high-performance utilities for JSON serialization, text manipulation, object validation, task coordination, mathematical operations, DateTime handling, and more.

			Key features:
			• YANJson: High-performance JSON serialization with robust error handling
			• YANText: String manipulation, validation, and transformation with null safety
			• YANObject: Object validation, property analysis, and deep copying
			• YANTask: Enhanced task coordination with conditional waiting and error handling
			• YANUnmanaged: Type parsing and conversion with built-in error handling
			• YANRandom: Random value generation for various types and collections
			• YANMath: Mathematical operations with null handling and type conversion
			• YANDateTime: Time zone conversion and date calculations
			• YANProcess: Process management utilities
			• YANExpression: Dynamic property access and expression tree utilities

			All components feature fluent APIs, robust null handling, collection support, and performance optimizations. YANLib simplifies common programming tasks while maintaining high performance, making it an essential toolkit for .NET developers.
		</Description>
		<Copyright>Copyright ©  2023</Copyright>
		<PackageIcon>icon.png</PackageIcon>
		<PackageProjectUrl>https://github.com/Tynab</PackageProjectUrl>
		<RepositoryUrl>https://github.com/Tynab/YANLib</RepositoryUrl>
		<PackageTags>C#, .NET, Library</PackageTags>
		<PackAsTool>False</PackAsTool>
		<PackageReadmeFile>README.md</PackageReadmeFile>
		<RepositoryType>git</RepositoryType>
		<PackageReleaseNotes>### YANLib 8.2.1 - TimeSpan Support &amp; Parsing Enhancements

## Enhanced Type Support

- **TimeSpan Parsing Integration**

	- Added comprehensive TimeSpan support to `Parse&lt;T&gt;` extension methods
	- Implemented TimeSpan parsing with various format patterns (days, hours, minutes, seconds, milliseconds)
	- Full support for nullable TimeSpan (`TimeSpan?`) parsing with graceful null handling

- **Collection TimeSpan Support**

	- Extended `Parses&lt;T&gt;` to handle collections of TimeSpan values
	- Added TimeSpan support to dictionary parsing with `Parses&lt;TKey, TValue&gt;`
	- Implemented TimeSpan support in lookup parsing with `Parses&lt;TKey, TElement&gt;`
	- Support for mixed TimeSpan formats within collections

## Performance

- Optimized TimeSpan parsing with efficient string format detection
- Improved handling of TimeSpan components for maximum accuracy
- Enhanced parsing performance for TimeSpan collections
- Reduced memory allocations in TimeSpan conversion operations

## Improvements

- Consistent behavior between DateTime and TimeSpan parsing
- Graceful handling of invalid TimeSpan formats
- Extended XML documentation for all TimeSpan-related methods
- Comprehensive test coverage for TimeSpan parsing scenarios
- Improved type safety with TimeSpan-specific handling

See full documentation at: [https://github.com/Tynab/YANLib/wiki](https://github.com/Tynab/YANLib/wiki)</PackageReleaseNotes>
		<PackageLicenseExpression>MIT</PackageLicenseExpression>
		<PackageRequireLicenseAcceptance>False</PackageRequireLicenseAcceptance>
		<PackageId>Tynab.YANLib</PackageId>
		<Version>8.2.1</Version>
		<LangVersion>preview</LangVersion>
		<ProduceReferenceAssembly>True</ProduceReferenceAssembly>
		<IsPackable>true</IsPackable>
		<IncludeBuildOutput>true</IncludeBuildOutput>
	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
		<Optimize>False</Optimize>
		<DebugType>portable</DebugType>
	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
		<Optimize>True</Optimize>
		<DebugType>portable</DebugType>
	</PropertyGroup>

	<ItemGroup>
		<Content Include="ic.ico" />
	</ItemGroup>

	<ItemGroup>
		<None Include="..\..\README.md">
			<Pack>True</Pack>
			<PackagePath>\</PackagePath>
		</None>
		<None Include="..\..\res\icon.png">
			<Pack>True</Pack>
			<PackagePath>\</PackagePath>
		</None>
	</ItemGroup>

	<ItemGroup>
		<ProjectReference Include="..\YANLib.Implementation\YANLib.Implementation.csproj">
			<PrivateAssets>all</PrivateAssets>
		</ProjectReference>
	</ItemGroup>

	<ItemGroup>
		<None Include="..\YANLib.Implementation\bin\$(Configuration)\$(TargetFramework)\YANLib.Implementation.dll" Pack="true" PackagePath="lib\$(TargetFramework)" Visible="false" />
	</ItemGroup>

</Project>
